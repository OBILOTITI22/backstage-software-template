name: ${{ values.app_name }}-cicd

on:
  push:
    paths:
      - src/**
    branches:
      - master

# allow pushing from the self-hosted runner
permissions:
  contents: write

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Shorten commit id
        shell: bash
        run: |
          echo "COMMIT_ID=${GITHUB_SHA::6}" >> "$GITHUB_ENV"
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ '${{ secrets.DOCKERHUB_USERNAME }}' }}
          password: ${{ '${{ secrets.DOCKERHUB_TOKEN }}' }}
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: obilotiti/${{ values.app_name }}:${{ '${{ env.COMMIT_ID }}' }}
    outputs:
      commit_id: ${{ '${{ env.COMMIT_ID }}' }}

  cd:
    needs: ci
    runs-on: self-hosted
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master
          # use your org PAT so the working copy is writable
          token: ${{ '${{ secrets.AUTH_GITHUB_TOKEN }}' }}

      - name: Modify values file
        shell: bash
        run: |
          echo ${{ '${{ needs.ci.outputs.commit_id }}' }}
          # Use Mike Farah yq (supports -i). Avoid the Python yq wrapper.
          if ! command -v yq >/dev/null 2>&1; then
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi
          TAG=${{ '${{ needs.ci.outputs.commit_id }}' }}
          yq -i ".image.tag = \"${TAG}\"" charts/${{ values.app_name }}/values-${{ values.app_env }}.yaml

      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          add: charts/${{ values.app_name }}/values-${{ values.app_env }}.yaml
          message: "Updates values.yaml with commit ${{ '${{ needs.ci.outputs.commit_id }}' }}"
          default_author: github_actions
          pull: "--rebase --autostash"
          push: true
          branch: master

      - name: Install argocd
        shell: bash
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Configure kubectl access
        shell: bash
        run: |
          # Verify kubectl can access the cluster
          kubectl cluster-info
          kubectl get pods -n argocd

      - name: argocd login with service account token
        env:
          ARGOCD_AUTH_TOKEN: ${{ '${{ secrets.ARGOCD_AUTH_TOKEN }}' }}
        shell: bash
        run: |
          # Use the service account token for in-cluster authentication
          if [ -n "$ARGOCD_AUTH_TOKEN" ]; then
            echo "Using auth token for ArgoCD login"
            argocd login argocd-server.argocd.svc.cluster.local \
              --insecure \
              --grpc-web \
              --auth-token "$ARGOCD_AUTH_TOKEN" \
              --skip-test-tls
          else
            echo "ERROR: ARGOCD_AUTH_TOKEN secret is required"
            exit 1
          fi

      - name: Ensure argocd repo and app
        env:
          GH_PAT: ${{ '${{ secrets.AUTH_GITHUB_TOKEN }}' }}
        shell: bash
        run: |
          # Connects the argocd repo
          repo="https://github.com/obilotiti-com/${{ values.app_name }}.git"
          # If private, add with GitHub token so ArgoCD can pull
          if ! argocd repo list | grep -q "$repo"; then
            argocd repo add "$repo" --username x-access-token --password "$GH_PAT"
          fi

          # Creates the argocd app
          if ! argocd app get ${{ values.app_name }}; then
            argocd app create ${{ values.app_name }} \
              --repo "$repo" \
              --path charts/${{ values.app_name }} \
              --dest-namespace ${{ values.app_env }} \
              --dest-server https://kubernetes.default.svc \
              --values values-${{ values.app_env }}.yaml \
              --revision master \
              --sync-policy manual \
              --sync-option CreateNamespace=true
          fi

      - name: Argocd app sync
        shell: bash
        run: |
          argocd app sync ${{ values.app_name }}
          argocd app wait ${{ values.app_name }} --timeout 180